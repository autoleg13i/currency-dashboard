import streamlit as st
import time
import pandas as pd
import os
from currency_utils import get_monobank_data, get_privatbank_data
from parsers import parse_monobank, parse_privatbank

# ‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(page_title="–ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç", page_icon="üí±")

# ‚è±Ô∏è –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
REFRESH_INTERVAL = 300
now = time.time()
if "last_refresh" not in st.session_state:
    st.session_state.last_refresh = now

time_since = int(now - st.session_state.last_refresh)
time_left = max(REFRESH_INTERVAL - time_since, 0)

# üîÑ –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ rerun
if time_left <= 0:
    st.session_state.last_refresh = now
    st.stop()

# üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üí± –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç –≤—ñ–¥ –±–∞–Ω–∫—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏")

# üïí –¢–∞–π–º–µ—Ä —á–µ—Ä–µ–∑ st.empty()
timer_placeholder = st.empty()
progress_placeholder = st.empty()

timer_placeholder.markdown(
    f"<h5 style='color:gray;'>‚è±Ô∏è –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑: "
    f"<span style='color:black;'>{time_left} —Å–µ–∫</span></h5>",
    unsafe_allow_html=True
)
progress_placeholder.progress(int((REFRESH_INTERVAL - time_left) / REFRESH_INTERVAL * 100))

# üîò –†—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
if st.button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∑–∞—Ä–∞–∑"):
    st.session_state.last_refresh = time.time()
    st.rerun()

# üì° –î–∞–Ω—ñ –∑ API
mono_raw = get_monobank_data()["data"]
privat_raw = get_privatbank_data()["data"]

mono = parse_monobank(mono_raw) if mono_raw else []
privat = parse_privatbank(privat_raw) if privat_raw else []

# üß© DataFrame
df = pd.DataFrame(mono + privat)
df["–ë–∞–Ω–∫"] = ["Monobank"] * len(mono) + ["PrivatBank"] * len(privat)

# üéõÔ∏è –í–∏–±—ñ—Ä –≤–∞–ª—é—Ç–∏
–≤–∞–ª—é—Ç–∏ = sorted(df["ccy"].unique())
–æ–±—Ä–∞–Ω–∞_–≤–∞–ª—é—Ç–∞ = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É", –≤–∞–ª—é—Ç–∏, index=–≤–∞–ª—é—Ç–∏.index("USD") if "USD" in –≤–∞–ª—é—Ç–∏ else 0)
df_filtered = df[df["ccy"] == –æ–±—Ä–∞–Ω–∞_–≤–∞–ª—é—Ç–∞]

# üåç –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫
df_filtered = df_filtered.rename(columns={
    "ccy": "–í–∞–ª—é—Ç–∞",
    "rateBuy": "–ö—É—Ä—Å –∫—É–ø—ñ–≤–ª—ñ",
    "rateSell": "–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂—É",
    "–ë–∞–Ω–∫": "–ë–∞–Ω–∫"
})

# üåü –ù–∞–π–∫—Ä–∞—â—ñ –∫—É—Ä—Å–∏
best_buy = df_filtered["–ö—É—Ä—Å –∫—É–ø—ñ–≤–ª—ñ"].max()
best_sell = df_filtered["–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂—É"].min()

def highlight_best(row):
    return [
        "background-color: #d4edda; color: red" if col == "–ö—É—Ä—Å –∫—É–ø—ñ–≤–ª—ñ" and row["–ö—É—Ä—Å –∫—É–ø—ñ–≤–ª—ñ"] == best_buy
        else "background-color: #ffeeba; color: blue" if col == "–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂—É" and row["–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂—É"] == best_sell
        else ""
        for col in df_filtered.columns
    ]

# üìà –¢–∞–±–ª–∏—Ü—è
if not df_filtered.empty:
    st.markdown(f"**üí± –ü–æ—Ç–æ—á–Ω–∞ –≤–∞–ª—é—Ç–∞:** `{–æ–±—Ä–∞–Ω–∞_–≤–∞–ª—é—Ç–∞}`")
    st.dataframe(df_filtered.style.apply(highlight_best, axis=1), use_container_width=True)
else:
    st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –≤–∞–ª—é—Ç–∏.")

# üßæ –õ–æ–≥ —Ñ–∞–π–ª–∏
if os.path.exists("api_errors.log"):
    with open("api_errors.log", "r") as log_file:
        st.expander("üìã –õ–æ–≥ –ø–æ–º–∏–ª–æ–∫ API").write(log_file.read())
else:
    st.caption("–õ–æ–≥-—Ñ–∞–π–ª —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–æ–∫ –Ω–µ –±—É–ª–æ üéâ")

# ‚ÑπÔ∏è –Ü–Ω—Ñ–æ
with st.expander("‚ÑπÔ∏è –ü—Ä–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫"):
    st.markdown("""
    –¶–µ–π –¥–∞—à–±–æ—Ä–¥ –ø–æ–∫–∞–∑—É—î –∞–∫—Ç—É–∞–ª—å–Ω—ñ **–∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç USD, EUR, —Ç–æ—â–æ** –∑ Monobank —ñ PrivatBank –≤ –£–∫—Ä–∞—ó–Ω—ñ üìà  
    –î–∞–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è **–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω**, –∑ –ø—ñ–¥—Å–≤—ñ—Ç–∫–æ—é –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∫—É—Ä—Å—ñ–≤ üí°  
    [GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π](https://github.com/autoleg13i)  
    """)