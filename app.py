import streamlit as st
from streamlit_autorefresh import st_autorefresh
from currency_utils import get_monobank_data, get_privatbank_data
from parsers import parse_monobank, parse_privatbank
import pandas as pd
import os

st.set_page_config(page_title="–ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç", page_icon="üí±")
st.title("üí± –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç –≤—ñ–¥ –±–∞–Ω–∫—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏")

# üîÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —â–æ–ø‚Äô—è—Ç—å —Ö–≤–∏–ª–∏–Ω
st_autorefresh(interval=300000, key="refresh")

# üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–∏—Ö
mono_raw = get_monobank_data()["data"]
privat_raw = get_privatbank_data()["data"]

mono = parse_monobank(mono_raw) if mono_raw else []
privat = parse_privatbank(privat_raw) if privat_raw else []

# üß© –û–±'—î–¥–Ω–∞–Ω–Ω—è –≤ –æ–¥–∏–Ω –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
df = pd.DataFrame(mono + privat)
df["–ë–∞–Ω–∫"] = ["Monobank"] * len(mono) + ["PrivatBank"] * len(privat)

# üéõÔ∏è –§—ñ–ª—å—Ç—Ä –∑–∞ –æ–±—Ä–∞–Ω–æ—é –≤–∞–ª—é—Ç–æ—é
–≤–∞–ª—é—Ç–∏ = sorted(df["ccy"].unique())
–æ–±—Ä–∞–Ω–∞_–≤–∞–ª—é—Ç–∞ = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É", –≤–∞–ª—é—Ç–∏, index=–≤–∞–ª—é—Ç–∏.index("USD") if "USD" in –≤–∞–ª—é—Ç–∏ else 0)

df_filtered = df[df["ccy"] == –æ–±—Ä–∞–Ω–∞_–≤–∞–ª—é—Ç–∞]

# üåç –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —É–∫—Ä–∞—ó–Ω—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
df_filtered = df_filtered.rename(columns={
    "ccy": "–í–∞–ª—é—Ç–∞",
    "rateBuy": "–ö—É—Ä—Å –∫—É–ø—ñ–≤–ª—ñ",
    "rateSell": "–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂—É",
    "–ë–∞–Ω–∫": "–ë–∞–Ω–∫"
})

# üåü –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∫—É—Ä—Å—ñ–≤
best_buy = df_filtered["–ö—É—Ä—Å –∫—É–ø—ñ–≤–ª—ñ"].max()
best_sell = df_filtered["–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂—É"].min()

# üé® –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó
def highlight_best(row):
    styles = []
    for col in df_filtered.columns:
        style = ""
        if col == "–ö—É—Ä—Å –∫—É–ø—ñ–≤–ª—ñ" and row["–ö—É—Ä—Å –∫—É–ø—ñ–≤–ª—ñ"] == best_buy:
            style = "background-color: #d4edda; color: red"
        elif col == "–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂—É" and row["–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂—É"] == best_sell:
            style = "background-color: #ffeeba; color: blue"
        styles.append(style)
    return styles

# üìä –í–∏–≤—ñ–¥ —É —Ç–∞–±–ª–∏—Ü—é –∑ –ø—ñ–¥—Å–≤—ñ—Ç–∫–æ—é
if not df_filtered.empty:
    st.markdown(f"**üí± –ü–æ—Ç–æ—á–Ω–∞ –≤–∞–ª—é—Ç–∞:** `{–æ–±—Ä–∞–Ω–∞_–≤–∞–ª—é—Ç–∞}`")
    st.dataframe(
        df_filtered.style.apply(highlight_best, axis=1),
        use_container_width=True
    )
else:
    st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –≤–∞–ª—é—Ç–∏.")

# üßæ –í–∏–≤–µ–¥–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ –ø–æ–º–∏–ª–æ–∫
if os.path.exists("api_errors.log"):
    with open("api_errors.log", "r") as log_file:
        st.expander("üìã –õ–æ–≥ –ø–æ–º–∏–ª–æ–∫ API").write(log_file.read())
else:
    st.caption("–õ–æ–≥-—Ñ–∞–π–ª —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–æ–∫ –Ω–µ –±—É–ª–æ üéâ")